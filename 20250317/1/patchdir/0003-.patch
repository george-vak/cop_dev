From d15eb476f28ad51fb3e695fdc8c28d6a6692dfeb Mon Sep 17 00:00:00 2001
From: Vakulenko Georgy <g.vakulenko.s70@gmail.com>
Date: Sun, 23 Mar 2025 21:49:14 +0300
Subject: [PATCH 3/3] =?UTF-8?q?=D0=B0=D1=82=D0=B0=D0=BA=D0=B8=20=D0=BA?=
 =?UTF-8?q?=D0=BB=D0=B8=D0=B5=D0=BD=D1=82+=D1=81=D0=B5=D1=80=D0=B2=D0=B5?=
 =?UTF-8?q?=D1=80?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 20250317/1/client.py | 141 ++++++++++++++++++-------------------------
 20250317/1/server.py |  33 ++++++++--
 2 files changed, 87 insertions(+), 87 deletions(-)

diff --git a/20250317/1/client.py b/20250317/1/client.py
index 8ac3a28..170afcb 100644
--- a/20250317/1/client.py
+++ b/20250317/1/client.py
@@ -1,11 +1,7 @@
 import cmd
 from io import StringIO
-from math import trunc
-
 import cowsay
 import shlex
-
-
 import socket
 
 class MUD(cmd.Cmd):
@@ -19,8 +15,6 @@ class MUD(cmd.Cmd):
         self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         self.client_socket.connect(('127.0.0.1', 12345))
 
-        # self.allowed_list = ["cow"]
-
         self.jgsbat = cowsay.read_dot_cow(StringIO("""
         $the_cow = <<EOC;
             ,_                    _,
@@ -36,31 +30,20 @@ class MUD(cmd.Cmd):
         """))
         self.allowed_list = cowsay.list_cows() + ["jgsbat"]
 
-    # def encounter(self):
-    #     if self.field[self.y][self.x] == 0:
-    #         print(f'Moved to ({self.x}, {self.y})')
-    #         return
-    #
-    #     name = self.field[self.y][self.x]['name']
-    #     word = self.field[self.y][self.x]['word']
-    #
-    #     if name == "jgsbat":
-    #         print(cowsay.cowsay(word, cowfile=self.jgsbat))
-    #     else:
-    #         print(cowsay.cowsay(word, cow=name))
-    
+
     def encounter(self, name, word):
         if name == "jgsbat":
             print(cowsay.cowsay(word, cowfile=self.jgsbat))
         else:
             print(cowsay.cowsay(word, cow=name))
-    
-    
+
+
     def send_comm(self, comm):
         self.client_socket.send(comm.encode())
         ans = self.client_socket.recv(1024).decode()
         return ans
 
+
     def do_up(self, arg):
         answ = self.send_comm("move 0 -1")
         try:
@@ -68,7 +51,8 @@ class MUD(cmd.Cmd):
             print(f'Moved to ({x}, {y})')
         except ValueError:
             self.encounter(answ.split()[0], answ.split()[1])
-            
+
+
     def do_down(self, arg):
         answ = self.send_comm("move 0 1")
         try:
@@ -76,7 +60,8 @@ class MUD(cmd.Cmd):
             print(f'Moved to ({x}, {y})')
         except ValueError:
             self.encounter(answ.split()[0], answ.split()[1])
-            
+
+
     def do_right(self, arg):
         answ = self.send_comm("move 1 0")
         try:
@@ -85,6 +70,7 @@ class MUD(cmd.Cmd):
         except ValueError:
             self.encounter(answ.split()[0], answ.split()[1])
 
+
     def do_left(self, arg):
         answ = self.send_comm("move -1 0")
         try:
@@ -93,13 +79,13 @@ class MUD(cmd.Cmd):
         except ValueError:
             self.encounter(answ.split()[0], answ.split()[1])
 
+
     def do_exit(self, arg):
         self.client_socket.send(b"exit")
         self.client_socket.close()
         print("Disconnect.")
         return True
 
-# addmon cow hp 93 hello SJSJSJS coords 0 1
 
     def do_addmon(self, arg):
         inp = shlex.split(arg)
@@ -144,71 +130,60 @@ class MUD(cmd.Cmd):
                         return
                     ii += 2
 
-
             ii += 1
 
         print(self.send_comm(f"add {curr_name} {m_x} {m_y} {curr_word} {curr_hp}"))
 
 
+    def do_attack(self, arg=""):
+        if not arg:
+            print("Укажите имя монстра для атаки")
+            return
+        else:
+            arg = shlex.split(arg)
+        arg.append("sword")
+
+        if arg[1] == "with":
+            if arg[2] in self.arsenal:
+                weap = arg[2]
+            else:
+                print("Unknown weapon")
+                return
+        elif arg[1] == "sword":
+            weap = arg[1]
+        else:
+            print("ожидается: attack <mons_name> with <weap_name>")
+            return
 
-        # if self.field[m_y][m_x] == 0:
-        #     print(f'Added monster {curr_name} to ({m_x}, {m_y}) saying {curr_word}')
-        # else:
-        #     print(f'Replaced the old monster')
-        #
-        # self.field[m_y][m_x] = {'name': curr_name, 'word': curr_word, 'hp': curr_hp}
-
-    # def do_attack(self, arg=""):
-    #     if self.field[self.y][self.x] == 0:
-    #         print(f"No monster here")
-    #         return
-    #
-    #     if not arg:
-    #         print("Укажите имя монстра для атаки")
-    #         return
-    #     else:
-    #         arg = shlex.split(arg)
-    #     arg.append("sword")
-    #
-    #     if arg[0] != self.field[self.y][self.x]["name"]:
-    #         print(f"No {arg[0]} here")
-    #         return
-    #
-    #     if arg[1] == "with":
-    #         if arg[2] in self.arsenal:
-    #             weap = arg[2]
-    #         else:
-    #             print("Unknown weapon")
-    #             return
-    #     elif arg[1] == "sword":
-    #         weap = arg[1]
-    #     else:
-    #         print("ожидается: attack <mons_name> with <weap_name>")
-    #         return
-    #
-    #
-    #     if self.field[self.y][self.x]["hp"] <= self.arsenal[weap]:
-    #         print(f"{self.field[self.y][self.x]['name']} died")
-    #         self.field[self.y][self.x] = 0
-    #         return
-    #
-    #     else:
-    #         self.field[self.y][self.x]["hp"] -= self.arsenal[weap]
-    #         print(f"{self.field[self.y][self.x]['name']} now has {
-    #         self.field[self.y][self.x]['hp']}")
-    #
-    # def complete_attack(self, text, line, begidx, endidx):
-    #     words = shlex.split(line[:endidx])
-    #     if len(words) == 1:
-    #         return self.allowed_list
-    #     elif len(words) == 2:
-    #         return [mons for mons in self.allowed_list if mons.startswith(text)]
-    #
-    #     elif len(words) == 3 and words[2] == "with":
-    #         return list(self.arsenal)
-    #     elif len(words) == 4 and words[2] == "with":
-    #         return [weap for weap in self.arsenal if weap.startswith(text)]
-    #     return []
+        answ = self.send_comm(f"attack {arg[0]} {self.arsenal[weap]}").split()
+        # name hp hit
+        if answ[0] == "No":
+            print(*answ)
+        else:
+            print(f"Attacked {arg[0]}, damage {answ[2]} hp")
+            if answ[1] == "0":
+                print(f"{arg[0]} died")
+            else:
+                print(f"{arg[0]} now has {answ[1]} hp")
+
+
+    def complete_attack(self, text, line, begidx, endidx):
+        words = shlex.split(line[:endidx])
+        if len(words) == 1:
+            return self.allowed_list
+        elif len(words) == 2:
+            return [mons for mons in self.allowed_list if mons.startswith(text)]
+
+        elif len(words) == 3 and words[2] == "with":
+            return list(self.arsenal)
+        elif len(words) == 4 and words[2] == "with":
+            return [weap for weap in self.arsenal if weap.startswith(text)]
+        return []
+
+
+    def do_help(self, arg):
+        print("-----\naddmon tux hp 25 hello SJSJSJS coords 0 0")
+        print("attack tux with axe\n-----")
 
 if __name__ == "__main__":
     MUD().cmdloop()
diff --git a/20250317/1/server.py b/20250317/1/server.py
index aec5ab2..8c9ed63 100644
--- a/20250317/1/server.py
+++ b/20250317/1/server.py
@@ -21,7 +21,8 @@ def handle_comm(comm):
             name = field[y][x]['name']
             word = field[y][x]['word']
             return f"{name} {word}"
-
+        
+        
     elif parts[0] == "add":
         # add name x y word hp
         curr_name = str(parts[1])
@@ -29,16 +30,38 @@ def handle_comm(comm):
         m_y = int(parts[3])
         curr_word = str(parts[4])
         curr_hp = int(parts[5])
+        
         if field[m_y][m_x] == 0:
             field[m_y][m_x] = {'name': curr_name, 'word': curr_word, 'hp': curr_hp}
             return f"Added monster {curr_name} to ({m_x}, {m_y}) saying {curr_word}"
         else:
             field[m_y][m_x] = {'name': curr_name, 'word': curr_word, 'hp': curr_hp}
             return f"Replaced the old monster"
-
-
+        
+        
+    elif parts[0] == "attack":
+        # attack name hit
+        name = str(parts[1])
+        hit = int(parts[2])
+        
+        if field[y][x] == 0:
+            return f"No monster here"
+        
+        elif name != field[y][x]["name"]:
+            return f"No {name} here"
+        
+        elif field[y][x]["hp"] <= hit:
+            damag = field[y][x]["hp"]
+            field[y][x] = 0
+            return f"{name} 0 {damag}"
+        
+        else:
+            field[y][x]["hp"] -= hit
+            return f"{name} {field[y][x]['hp']} {hit}"
+        
     else:
-        return "<<<>>>"
+        return "smth happened write @donballon_b"
+
 
 def start_server():
     server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
@@ -60,8 +83,10 @@ def start_server():
                     exit()
                 response = handle_comm(data)
                 client_socket.send(response.encode())
+                
         except Exception as e:
             print(f"Ошибка::::: {e}")
+            
         finally:
             client_socket.close()
             print("<Клиент отключен.>")
-- 
2.39.5 (Apple Git-154)

