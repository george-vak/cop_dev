From 929b93ff8fdce3f54ed5af48360075eb025ecb65 Mon Sep 17 00:00:00 2001
From: Vakulenko Georgy <g.vakulenko.s70@gmail.com>
Date: Sun, 23 Mar 2025 16:40:57 +0300
Subject: [PATCH 1/3] =?UTF-8?q?=D0=BA=D0=BB=D0=B8=D0=B5=D0=BD=D1=82+=D1=81?=
 =?UTF-8?q?=D0=B5=D1=80=D0=B2=D0=B5=D1=80=20=D0=B4=D0=B2=D0=B8=D0=B6=D0=B5?=
 =?UTF-8?q?=D0=BD=D0=B8=D1=8F?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 20250317/1/client.py | 196 +++++++++++++++++++++++++++++++++++++++++++
 20250317/1/server.py |  50 +++++++++++
 2 files changed, 246 insertions(+)
 create mode 100644 20250317/1/client.py
 create mode 100644 20250317/1/server.py

diff --git a/20250317/1/client.py b/20250317/1/client.py
new file mode 100644
index 0000000..1e082a0
--- /dev/null
+++ b/20250317/1/client.py
@@ -0,0 +1,196 @@
+import cmd
+from io import StringIO
+import cowsay
+import shlex
+
+
+import socket
+
+class MUD(cmd.Cmd):
+    prompt = ">> "
+    def __init__(self):
+        super().__init__()
+        self.x, self.y = 0, 0
+        self.field = [[0 for j in range(10)] for i in range(10)]
+        self.arsenal = {"sword": 10, "spear": 15, "axe": 20}
+
+        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        self.client_socket.connect(('127.0.0.1', 12345))
+
+        # self.jgsbat = cowsay.read_dot_cow(StringIO("""
+        # $the_cow = <<EOC;
+        #     ,_                    _,
+        #     ) '-._  ,_    _,  _.-' (
+        #     )  _.-'.|\\--//|.'-._  (
+        #      )'   .'\\/o\\/o\\/'.   `(
+        #       ) .' . \\====/ . '. (
+        #        )  / <<    >> \\  (
+        #         '-._/``  ``\\_.-'
+        #   jgs     __\\'--'//__
+        #          (((""`  `"")))
+        # EOC
+        # """))
+        # self.allowed_list = cowsay.list_cows() + ["jgsbat"]
+
+    # def encounter(self):
+    #     if self.field[self.y][self.x] == 0:
+    #         print(f'Moved to ({self.x}, {self.y})')
+    #         return
+    #
+    #     name = self.field[self.y][self.x]['name']
+    #     word = self.field[self.y][self.x]['word']
+    #
+    #     if name == "jgsbat":
+    #         print(cowsay.cowsay(word, cowfile=self.jgsbat))
+    #     else:
+    #         print(cowsay.cowsay(word, cow=name))
+
+    def send_comm(self, comm):
+        self.client_socket.send(comm.encode())
+        ans = self.client_socket.recv(1024).decode()
+        return ans
+
+
+
+
+    def do_up(self, arg):
+        answ = self.send_comm("move 0 -1")
+        x, y = map(int, answ.split())
+        print(f'Moved to ({x}, {y})')
+
+    def do_down(self, arg):
+        answ = self.send_comm("move 0 1")
+        x, y = map(int, answ.split())
+        print(f'Moved to ({x}, {y})')
+
+
+
+    def do_right(self, arg):
+        answ = self.send_comm("move 1 0")
+        x, y = map(int, answ.split())
+        print(f'Moved to ({x}, {y})')
+
+
+
+    def do_left(self, arg):
+        answ = self.send_comm("move -1 0")
+        x, y = map(int, answ.split())
+        print(f'Moved to ({x}, {y})')
+
+    def do_exit(self, arg):
+        self.client_socket.send(b"exit")
+        self.client_socket.close()
+        print("Disconnect.")
+        return True
+
+
+
+    # def do_addmon(self, arg):
+    #     inp = shlex.split(arg)
+    #     if len(inp) != 8:
+    #         print("Invalid arguments <<кол-во>>")
+    #         return
+    #
+    #     curr_name = inp[0]
+    #     if curr_name not in self.allowed_list and curr_name != "jgsbat":
+    #         print("Cannot add unknown monster")
+    #         return
+    #
+    #     m_x, m_y, curr_hp = 0, 0, 0
+    #     curr_word = ""
+    #     ii = 1
+    #     while ii < 8:
+    #         # print(inp[ii])
+    #         match inp[ii]:
+    #             case "hello":
+    #                 curr_word = inp[ii+1]
+    #                 ii += 1
+    #
+    #             case "hp":
+    #                 try:
+    #                     curr_hp = int(inp[ii+1])
+    #                 except Exception:
+    #                     print("Invalid command")
+    #                     return
+    #                 if curr_hp < 1:
+    #                     print("Invalid command")
+    #                     return
+    #                 ii += 1
+    #
+    #             case "coords":
+    #                 try:
+    #                     m_x = int(inp[ii+1])
+    #                     m_y = int(inp[ii+2])
+    #                 except Exception:
+    #                     print("Invalid command")
+    #                     return
+    #                 if m_x < 0 or m_x > 9 or m_y < 0 or m_y > 9:
+    #                     print("Invalid command")
+    #                     return
+    #                 ii += 2
+    #
+    #
+    #         ii += 1
+    #
+    #
+    #     if self.field[m_y][m_x] == 0:
+    #         print(f'Added monster {curr_name} to ({m_x}, {m_y}) saying {curr_word}')
+    #     else:
+    #         print(f'Replaced the old monster')
+    #
+    #     self.field[m_y][m_x] = {'name': curr_name, 'word': curr_word, 'hp': curr_hp}
+    #
+    # def do_attack(self, arg=""):
+    #     if self.field[self.y][self.x] == 0:
+    #         print(f"No monster here")
+    #         return
+    #
+    #     if not arg:
+    #         print("Укажите имя монстра для атаки")
+    #         return
+    #     else:
+    #         arg = shlex.split(arg)
+    #     arg.append("sword")
+    #
+    #     if arg[0] != self.field[self.y][self.x]["name"]:
+    #         print(f"No {arg[0]} here")
+    #         return
+    #
+    #     if arg[1] == "with":
+    #         if arg[2] in self.arsenal:
+    #             weap = arg[2]
+    #         else:
+    #             print("Unknown weapon")
+    #             return
+    #     elif arg[1] == "sword":
+    #         weap = arg[1]
+    #     else:
+    #         print("ожидается: attack <mons_name> with <weap_name>")
+    #         return
+    #
+    #
+    #     if self.field[self.y][self.x]["hp"] <= self.arsenal[weap]:
+    #         print(f"{self.field[self.y][self.x]['name']} died")
+    #         self.field[self.y][self.x] = 0
+    #         return
+    #
+    #     else:
+    #         self.field[self.y][self.x]["hp"] -= self.arsenal[weap]
+    #         print(f"{self.field[self.y][self.x]['name']} now has {
+    #         self.field[self.y][self.x]['hp']}")
+    #
+    # def complete_attack(self, text, line, begidx, endidx):
+    #     words = shlex.split(line[:endidx])
+    #     if len(words) == 1:
+    #         return self.allowed_list
+    #     elif len(words) == 2:
+    #         return [mons for mons in self.allowed_list if mons.startswith(text)]
+    #
+    #     elif len(words) == 3 and words[2] == "with":
+    #         return list(self.arsenal)
+    #     elif len(words) == 4 and words[2] == "with":
+    #         return [weap for weap in self.arsenal if weap.startswith(text)]
+    #     return []
+
+if __name__ == "__main__":
+    MUD().cmdloop()
diff --git a/20250317/1/server.py b/20250317/1/server.py
new file mode 100644
index 0000000..710a3b7
--- /dev/null
+++ b/20250317/1/server.py
@@ -0,0 +1,50 @@
+import socket
+
+x = 0
+y = 0
+field = [[0 for j in range(10)] for i in range(10)]
+
+def handle_comm(comm):
+    global x, y
+    if comm.startswith("move"):
+        parts = comm.split()
+        dx = int(parts[1])
+        dy = int(parts[2])
+        x = (x + dx) % 10
+        y = (y + dy) % 10
+
+        if field[y][x] == 0:
+            return f"{x} {y}"
+        else:
+            return "aaaa"
+    else:
+        return "bbbb"
+
+def start_server():
+    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+    server_socket.bind(('127.0.0.1', 12345))
+    server_socket.listen(5)
+    print("<Сервер запущен>")
+
+    while True:
+        client_socket, addr = server_socket.accept()
+        print("Подключен клиент:", addr)
+
+        try:
+            while True:
+                data = client_socket.recv(1024).decode()
+                if not data:
+                    break
+                print("команда:", data)
+                if data.lower() == "exit":
+                    exit()
+                response = handle_comm(data)
+                client_socket.send(response.encode())
+        except Exception as e:
+            print(f"Ошибка {e}")
+        finally:
+            client_socket.close()
+            print("<Клиент отключен.>")
+
+if __name__ == "__main__":
+    start_server()
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)

